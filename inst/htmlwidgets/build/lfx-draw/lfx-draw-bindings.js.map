{"version":3,"file":"lfx-draw-bindings.js","mappings":"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","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-draw-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, Shiny, HTMLWidgets */\r\n\r\nLeafletWidget.methods.addDrawToolbar = function(targetLayerId, targetGroup, options) {\r\n  (function(){\r\n\r\n    var map = this;\r\n\r\n    if(map.drawToolbar) {\r\n      map.drawToolbar.remove(map);\r\n      delete map.drawToolbar;\r\n    }\r\n\r\n    // FeatureGroup that will hold our drawn shapes/markers\r\n    // This can be an existing GeoJSON layer whose features can be edited/deleted or new ones added.\r\n    // OR an existing FeatureGroup whose features can be edited/deleted or new ones added.\r\n    // OR a new FeatureGroup to hold drawn shapes.\r\n    var editableFeatureGroup;\r\n\r\n    if(targetLayerId) {\r\n      // If we're given an existing GeoJSON layer find it and use it\r\n      editableFeatureGroup = map.layerManager.getLayer('geojson', targetLayerId);\r\n      if(editableFeatureGroup) {\r\n        map._editableGeoJSONLayerId = targetLayerId;\r\n      } else {\r\n        // throw an error if we can't find the target GeoJSON layer\r\n        throw 'GeoJSON layer with ID '+targetLayerId+' not Found';\r\n      }\r\n    } else {\r\n      // If we're given an existing FeatureLayer use that.\r\n      // In this case we don't throw an error if the specified FeatureGroup is not found,\r\n      // we silently create a new one.\r\n      if(!targetGroup) {\r\n        targetGroup = 'editableFeatureGroup';\r\n      }\r\n      editableFeatureGroup = map.layerManager.getLayerGroup(targetGroup, true);\r\n      map._editableFeatureGroupName = targetGroup;\r\n    }\r\n\r\n    // Create appropriate Marker Icon.\r\n    if(options && options.draw && options.draw.marker) {\r\n      if(options.draw.marker.markerIcon &&\r\n        options.draw.marker.markerIconFunction) {\r\n        options.draw.marker.icon =\r\n          options.draw.marker.markerIconFunction(\r\n            options.draw.marker.markerIcon);\r\n      }\r\n    }\r\n\r\n    // create appropriate options\r\n    if(!$.isEmptyObject(options.edit)) {\r\n      var editOptions = {};\r\n      if(!options.edit.remove) {\r\n        editOptions.remove = false;\r\n      }\r\n      if(!options.edit.edit) {\r\n        editOptions.edit = false;\r\n      } else if(!$.isEmptyObject(options.edit.selectedPathOptions)) {\r\n        editOptions.edit = {};\r\n        editOptions.edit.selectedPathOptions =\r\n          options.edit.selectedPathOptions;\r\n      }\r\n\r\n      if(!$.isEmptyObject(options.edit.poly)) {\r\n        editOptions.poly = options.edit.poly;\r\n      }\r\n\r\n      editOptions.featureGroup = editableFeatureGroup;\r\n      options.edit = editOptions;\r\n    }\r\n\r\n    // Set Toolbar / Handlers options if provided. Changes the default values.\r\n    if (options && options.toolbar) {\r\n      var rtool = options.toolbar;\r\n      var tooldef = L.drawLocal.draw.toolbar;\r\n      L.drawLocal.draw.toolbar.buttons = {\r\n          ...tooldef.buttons,\r\n          ...rtool.buttons\r\n      };\r\n      L.drawLocal.draw.toolbar.actions = {\r\n          ...tooldef.actions,\r\n          ...rtool.actions\r\n      };\r\n      L.drawLocal.draw.toolbar.finish = {\r\n          ...tooldef.finish,\r\n          ...rtool.finish\r\n      };\r\n      L.drawLocal.draw.toolbar.undo = {\r\n          ...tooldef.undo,\r\n          ...rtool.undo\r\n      };\r\n    }\r\n    if (options && options.handlers) {\r\n      var rhand = options.handlers;\r\n      var handldef = L.drawLocal.draw.handlers;\r\n      L.drawLocal.draw.handlers.circle = {\r\n          ...handldef.circle,\r\n          ...rhand.circle\r\n      };\r\n      L.drawLocal.draw.handlers.circlemarker = {\r\n          ...handldef.circlemarker,\r\n          ...rhand.circlemarker\r\n      };\r\n      L.drawLocal.draw.handlers.marker = {\r\n          ...handldef.marker,\r\n          ...rhand.marker\r\n      };\r\n      L.drawLocal.draw.handlers.polygon = {\r\n          ...handldef.polygon,\r\n          ...rhand.polygon\r\n      };\r\n      L.drawLocal.draw.handlers.polyline = {\r\n          ...handldef.polyline,\r\n          ...rhand.polyline\r\n      };\r\n      L.drawLocal.draw.handlers.rectangle = {\r\n          ...handldef.rectangle,\r\n          ...rhand.rectangle\r\n      };\r\n    }\r\n\r\n    // Create new Drawing Control\r\n    map.drawToolbar =  new L.Control.Draw(options);\r\n    map.drawToolbar.addTo(map);\r\n\r\n    // Event Listeners\r\n    map.on(L.Draw.Event.DRAWSTART, function(e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_start', {'feature_type': e.layerType, 'nonce': Math.random()});\r\n    });\r\n\r\n    map.on(L.Draw.Event.DRAWSTOP, function(e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_stop', {'feature_type': e.layerType,'nonce': Math.random()});\r\n    });\r\n\r\n    map.on(L.Draw.Event.CREATED, function (e) {\r\n      if (options.draw.singleFeature){\r\n        if (editableFeatureGroup.getLayers().length > 0) {\r\n          editableFeatureGroup.clearLayers();\r\n        }\r\n      }\r\n\r\n      var layer = e.layer;\r\n      editableFeatureGroup.addLayer(layer);\r\n\r\n      // assign a unique key to the newly created feature\r\n      var featureId = L.stamp(layer);\r\n      layer.feature = {\r\n        'type' : 'Feature',\r\n        'properties' : {\r\n          '_leaflet_id' : featureId,\r\n          'feature_type' : e.layerType\r\n        }\r\n      };\r\n\r\n      // circles are just Points and toGeoJSON won't store radius by default\r\n      // so we store it inside the properties.\r\n      if(typeof layer.getRadius === 'function') {\r\n        layer.feature.properties.radius = layer.getRadius();\r\n      }\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n\r\n      Shiny.onInputChange(map.id+'_draw_new_feature',\r\n        layer.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n    map.on(L.Draw.Event.EDITSTART, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_editstart', true);\r\n    });\r\n    map.on(L.Draw.Event.EDITSTOP, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_editstop', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.EDITED, function (e) {\r\n      var layers = e.layers;\r\n      layers.eachLayer(function(layer){\r\n        var featureId = L.stamp(layer);\r\n        if(!layer.feature) {\r\n          layer.feature = {'type' : 'Feature'};\r\n        }\r\n        if(!layer.feature.properties) {\r\n          layer.feature.properties = {};\r\n        }\r\n        layer.feature.properties._leaflet_id = featureId;\r\n        layer.feature.properties.layerId = layer.options.layerId;\r\n        if(typeof layer.getRadius === 'function') {\r\n          layer.feature.properties.radius = layer.getRadius();\r\n        }\r\n      });\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n\r\n      Shiny.onInputChange(map.id+'_draw_edited_features',\r\n        layers.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETESTART, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deletestart', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETESTOP, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deletestop', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETED, function (e) {\r\n      var layers = e.layers;\r\n      layers.eachLayer(function(layer){\r\n        var featureId = L.stamp(layer);\r\n        if(!layer.feature) {\r\n          layer.feature = {'type' : 'Feature'};\r\n        }\r\n        if(!layer.feature.properties) {\r\n          layer.feature.properties = {};\r\n        }\r\n        layer.feature.properties._leaflet_id = featureId;\r\n        layer.feature.properties.layerId = layer.options.layerId;\r\n        if(typeof layer.getRadius === 'function') {\r\n          layer.feature.properties.radius = layer.getRadius();\r\n        }\r\n      });\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deleted_features',\r\n        layers.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n  }).call(this);\r\n\r\n};\r\n\r\nLeafletWidget.methods.removeDrawToolbar = function(clearFeatures) {\r\n  (function(){\r\n\r\n    var map = this;\r\n\r\n    if(map.drawToolbar) {\r\n      map.drawToolbar.remove(map);\r\n      delete map.drawToolbar;\r\n    }\r\n    if(map._editableFeatureGroupName && clearFeatures) {\r\n      var featureGroup = map.layerManager.getLayerGroup(map._editableFeatureGroupName, false);\r\n      featureGroup.clearLayers();\r\n    }\r\n    map._editableFeatureGroupName = null;\r\n    if(map._editableGeoJSONLayerId && clearFeatures) {\r\n      map.layerManager.removeLayer('geojson', map._editableGeoJSONLayerId);\r\n    }\r\n    map._editableGeoJSONLayerId = null;\r\n  }).call(this);\r\n\r\n};\r\n\r\nLeafletWidget.methods.getDrawnItems = function() {\r\n  var map = this;\r\n\r\n  var featureGroup;\r\n  if(map._editableGeoJSONLayerId) {\r\n    featureGroup = map.layerManager.getLayer('geojson', map._editableGeoJSONLayerId);\r\n  } else if(map._editableFeatureGroupName) {\r\n    featureGroup = map.layerManager.getLayerGroup(map._editableFeatureGroupName, false);\r\n  }\r\n  if(featureGroup) {\r\n    return featureGroup.toGeoJSON();\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n};\r\n"],"names":["LeafletWidget","methods","addDrawToolbar","targetLayerId","targetGroup","options","editableFeatureGroup","map","this","drawToolbar","remove","layerManager","getLayer","_editableGeoJSONLayerId","getLayerGroup","_editableFeatureGroupName","draw","marker","markerIcon","markerIconFunction","icon","$","isEmptyObject","edit","editOptions","selectedPathOptions","poly","featureGroup","toolbar","rtool","tooldef","L","drawLocal","buttons","actions","finish","undo","handlers","rhand","handldef","circle","circlemarker","polygon","polyline","rectangle","Control","Draw","addTo","on","Event","DRAWSTART","e","HTMLWidgets","shinyMode","Shiny","onInputChange","id","layerType","Math","random","DRAWSTOP","CREATED","singleFeature","getLayers","length","clearLayers","layer","addLayer","featureId","stamp","feature","getRadius","properties","radius","toGeoJSON","EDITSTART","EDITSTOP","EDITED","layers","eachLayer","_leaflet_id","layerId","DELETESTART","DELETESTOP","DELETED","call","removeDrawToolbar","clearFeatures","removeLayer","getDrawnItems"],"sourceRoot":""}