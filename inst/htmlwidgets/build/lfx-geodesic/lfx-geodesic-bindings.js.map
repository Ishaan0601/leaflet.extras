{"version":3,"file":"lfx-geodesic-bindings.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-geodesic-bindings.js"],"sourcesContent":["/* global $, LeafletWidget, L, HTMLWidgets */\r\nLeafletWidget.methods.addGeodesicPolylines  = function(\r\n  polygons, layerId, group, options, popup, popupOptions,\r\n  label, labelOptions, highlightOptions) {\r\n  if(polygons.length > 0) {\r\n    var df = new LeafletWidget.DataFrame()\r\n      .col('shapes', polygons)\r\n      .col('layerId', layerId)\r\n      .col('group', group)\r\n      .col('popup', popup)\r\n      .col('popupOptions', popupOptions)\r\n      .col('label', label)\r\n      .col('labelOptions', labelOptions)\r\n      .col('highlightOptions', highlightOptions)\r\n      .cbind(options);\r\n\r\n    LeafletWidget.methods.addGenericLayers(this, 'shape', df,\r\n      function(df, i) {\r\n        var shapes = df.get(i, 'shapes');\r\n        var ret_shapes = [];\r\n        for (var j = 0; j < shapes.length; j++) {\r\n          for (var k = 0; k < shapes[j].length; k++) {\r\n            ret_shapes.push(\r\n              HTMLWidgets.dataframeToD3(shapes[j][k])\r\n            );\r\n          }\r\n        }\r\n        return L.geodesic(ret_shapes, df.get(i));\r\n      });\r\n  }\r\n};\r\n\r\n\r\nLeafletWidget.methods.addGreatCircles  = function(\r\n  lat, lng, radius, layerId, group, options, popup, popupOptions,\r\n  label, labelOptions, highlightOptions) {\r\n  if(!($.isEmptyObject(lat) || $.isEmptyObject(lng)) ||\r\n      ($.isNumeric(lat) && $.isNumeric(lng))) {\r\n    var df = new LeafletWidget.DataFrame()\r\n      .col('lat', lat)\r\n      .col('lng', lng)\r\n      .col('radius', radius)\r\n      .col('layerId', layerId)\r\n      .col('group', group)\r\n      .col('popup', popup)\r\n      .col('popupOptions', popupOptions)\r\n      .col('label', label)\r\n      .col('labelOptions', labelOptions)\r\n      .col('highlightOptions', highlightOptions)\r\n      .cbind(options);\r\n\r\n    var map = this;\r\n\r\n    LeafletWidget.methods.addGenericLayers(this, 'shape', df,\r\n      function(df, i) {\r\n        var options = df.get(i);\r\n        var Geodesic = L.geodesic([], options);\r\n        var center = L.marker([df.get(i, 'lat'), df.get(i, 'lng')]);\r\n\r\n        map.on('layeradd', function(e) {\r\n          if(e.layer === Geodesic) {\r\n            center.addTo(map);\r\n          }\r\n        });\r\n\r\n        map.on('layerremove', function(e) {\r\n          if(e.layer === Geodesic) {\r\n            map.removeLayer(center);\r\n          }\r\n        });\r\n\r\n        Geodesic.createCircle([df.get(i, 'lat'), df.get(i, 'lng')], df.get(i, 'radius'));\r\n        return Geodesic;\r\n      });\r\n  }\r\n};\r\n"],"names":[],"sourceRoot":""}