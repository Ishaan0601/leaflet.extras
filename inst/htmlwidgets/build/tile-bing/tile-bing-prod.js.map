{"version":3,"file":"tile-bing-prod.js","mappings":"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","sources":["webpack://leaflet.extras/./node_modules/leaflet-plugins/layer/tile/Bing.js"],"sourcesContent":["// Bing maps API: https://docs.microsoft.com/en-us/bingmaps/rest-services/\n\nL.BingLayer = L.TileLayer.extend({\n\toptions: {\n\t\t// imagerySet: https://docs.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#template-parameters\n\t\t// supported:\n\t\t// - Aerial, AerialWithLabels (Deprecated), AerialWithLabelsOnDemand\n\t\t// - Road (Deprecated), RoadOnDemand\n\t\t// - CanvasDark, CanvasLight, CanvasGray\n\t\t// not supported: Birdseye*, Streetside\n\t\timagerySet: 'Aerial', // to be changed on next major version!!\n\n\t\t// https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes\n\t\tculture: '',\n\n\t\t// https://docs.microsoft.com/en-us/bingmaps/articles/custom-map-styles-in-bing-maps#custom-map-styles-in-the-rest-and-tile-services\n\t\tstyle: '',\n\n\t\t// https://blogs.bing.com/maps/2015/02/12/high-ppi-maps-now-available-in-the-bing-maps-ajax-control\n\t\t// not documented in REST API docs, but working\n\t\t// warning: deprecated imagery sets may not support some values (depending also on zoom level)\n\t\tretinaDpi: 'd2',\n\n\t\tattribution: 'Bing',\n\t\tminZoom: 1,\n\t\tmaxZoom: 21\n\t\t// Actual `maxZoom` value may be less, depending on imagery set / coverage area\n\t\t// - 19~20 for all 'Aerial*'\n\t\t// - 20 for 'Road' (Deprecated)\n\t},\n\n\tinitialize: function (key, options) {\n\t\tif (typeof key === 'object') {\n\t\t\toptions = key;\n\t\t\tkey = false;\n\t\t}\n\t\tL.TileLayer.prototype.initialize.call(this, null, options);\n\n\t\toptions = this.options;\n\t\toptions.key = options.key || options.bingMapsKey;\n\t\toptions.imagerySet = options.imagerySet || options.type;\n\t\tif (key) { options.key = key; }\n\t},\n\n\ttile2quad: function (x, y, z) {\n\t\tvar quad = '';\n\t\tfor (var i = z; i > 0; i--) {\n\t\t\tvar digit = 0;\n\t\t\tvar mask = 1 << i - 1;\n\t\t\tif ((x & mask) !== 0) { digit += 1; }\n\t\t\tif ((y & mask) !== 0) { digit += 2; }\n\t\t\tquad = quad + digit;\n\t\t}\n\t\treturn quad;\n\t},\n\n\tgetTileUrl: function (coords) {\n\t\tvar data = {\n\t\t\tsubdomain: this._getSubdomain(coords),\n\t\t\tquadkey: this.tile2quad(coords.x, coords.y, this._getZoomForUrl()),\n\t\t\tculture: this.options.culture // compatibility for deprecated imagery sets ('Road' etc)\n\t\t};\n\t\treturn L.Util.template(this._url, data);\n\t},\n\n\tcallRestService: function (request, callback, context) {\n\t\tcontext = context || this;\n\t\tvar uniqueName = '_bing_metadata_' + L.Util.stamp(this);\n\t\twhile (window[uniqueName]) { uniqueName += '_'; }\n\t\trequest += '&jsonp=' + uniqueName;\n\t\tvar script = document.createElement('script');\n\t\tscript.setAttribute('type', 'text/javascript');\n\t\tscript.setAttribute('src', request);\n\t\twindow[uniqueName] = function (response) {\n\t\t\tdelete window[uniqueName];\n\t\t\tscript.remove();\n\t\t\tif (response.errorDetails) {\n\t\t\t\tthrow new Error(response.errorDetails);\n\t\t\t}\n\t\t\tcallback.call(context, response);\n\t\t};\n\t\tdocument.body.appendChild(script);\n\t},\n\n\t_makeApiUrl: function (restApi, resourcePath, query) {\n\t\tvar baseAPIparams = {\n\t\t\tversion: 'v1',\n\t\t\trestApi: restApi,\n\t\t\tresourcePath: resourcePath\n\t\t};\n\t\tquery = L.extend({\n\t\t\t// errorDetail: true, // seems no effect\n\t\t\tkey: this.options.key\n\t\t}, query);\n\n\t\t// https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/base-url-structure\n\t\tvar template = 'https://dev.virtualearth.net/REST/{version}/{restApi}/{resourcePath}'; // ?queryParameters&key=BingMapsKey\n\t\treturn L.Util.template(template, baseAPIparams) + L.Util.getParamString(query);\n\t},\n\n\tloadMetadata: function () {\n\t\tif (this.metaRequested) { return; }\n\t\tthis.metaRequested = true;\n\t\tvar options = this.options;\n\t\t// https://docs.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#complete-metadata-urls\n\t\tvar request = this._makeApiUrl('Imagery/Metadata', options.imagerySet, {\n\t\t\tUriScheme: 'https',\n\t\t\tinclude: 'ImageryProviders',\n\t\t\tculture: options.culture,\n\t\t\tstyle: options.style\n\t\t});\n\t\tthis.callRestService(request, function (meta) {\n\t\t\tvar r = meta.resourceSets[0].resources[0];\n\t\t\tif (!r.imageUrl) { throw new Error('imageUrl not found in response'); }\n\t\t\tif (r.imageUrlSubdomains) { options.subdomains = r.imageUrlSubdomains; }\n\t\t\tthis._providers = r.imageryProviders ? this._prepAttrBounds(r.imageryProviders) : [];\n\t\t\tthis._attributions = [];\n\t\t\tthis._url = r.imageUrl;\n\t\t\tif (options.retinaDpi && options.detectRetina && options.zoomOffset) {\n\t\t\t\tthis._url += '&dpi=' + options.retinaDpi;\n\t\t\t}\n\t\t\tthis.fire('load', {meta: meta});\n\t\t\tif (this._map) { this._update(); }\n\t\t});\n\t},\n\n\t_prepAttrBounds: function (providers) {\n\t\tproviders.forEach(function (provider) {\n\t\t\tprovider.coverageAreas.forEach(function (area) {\n\t\t\t\tarea.bounds = L.latLngBounds(\n\t\t\t\t\t[area.bbox[0], area.bbox[1]],\n\t\t\t\t\t[area.bbox[2], area.bbox[3]]\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t\treturn providers;\n\t},\n\n\t_update: function (center) {\n\t\tif (!this._url) { return; }\n\t\tL.GridLayer.prototype._update.call(this, center);\n\t\tthis._update_attribution();\n\t},\n\n\t_update_attribution: function (remove) {\n\t\tvar attributionControl = this._map.attributionControl;\n\t\tif (!attributionControl) {\n\t\t\tthis._attributions = {}; return;\n\t\t}\n\t\tvar bounds = this._map.getBounds();\n\t\tbounds = L.latLngBounds(bounds.getSouthWest().wrap(), bounds.getNorthEast().wrap());\n\t\tvar zoom = this._getZoomForUrl();\n\t\tvar attributions = this._providers.map(function (provider) {\n\t\t\treturn remove ? false : provider.coverageAreas.some(function (area) {\n\t\t\t\treturn zoom <= area.zoomMax && zoom >= area.zoomMin &&\n\t\t\t\t\tbounds.intersects(area.bounds);\n\t\t\t});\n\t\t});\n\t\tattributions.forEach(function (a,i) {\n\t\t\tif (a == this._attributions[i]) { // eslint-disable-line eqeqeq\n\t\t\t\treturn;\n\t\t\t} else if (a) {\n\t\t\t\tattributionControl.addAttribution(this._providers[i].attribution);\n\t\t\t} else {\n\t\t\t\tattributionControl.removeAttribution(this._providers[i].attribution);\n\t\t\t}\n\t\t}, this);\n\t\tthis._attributions = attributions;\n\t},\n\n\tonAdd: function (map) {\n\t\t// Note: Metadata could be loaded earlier, on layer initialize,\n\t\t//       but according to docs even such request is billable:\n\t\t//       https://docs.microsoft.com/en-us/bingmaps/getting-started/bing-maps-dev-center-help/understanding-bing-maps-transactions#rest-services\n\t\t//       That's why it's important to defer it till BingLayer is actually added to map\n\t\tthis.loadMetadata();\n\t\tL.GridLayer.prototype.onAdd.call(this, map);\n\t},\n\n\tonRemove: function (map) {\n\t\tif (this._providers) { this._update_attribution(true); }\n\t\tL.GridLayer.prototype.onRemove.call(this, map);\n\t}\n});\n\nL.bingLayer = function (key, options) {\n\treturn new L.BingLayer(key, options);\n};\n"],"names":["L","BingLayer","TileLayer","extend","options","imagerySet","culture","style","retinaDpi","attribution","minZoom","maxZoom","initialize","key","prototype","call","this","bingMapsKey","type","tile2quad","x","y","z","quad","i","digit","mask","getTileUrl","coords","data","subdomain","_getSubdomain","quadkey","_getZoomForUrl","Util","template","_url","callRestService","request","callback","context","uniqueName","stamp","window","script","document","createElement","setAttribute","response","remove","errorDetails","Error","body","appendChild","_makeApiUrl","restApi","resourcePath","query","baseAPIparams","version","getParamString","loadMetadata","metaRequested","UriScheme","include","meta","r","resourceSets","resources","imageUrl","imageUrlSubdomains","subdomains","_providers","imageryProviders","_prepAttrBounds","_attributions","detectRetina","zoomOffset","fire","_map","_update","providers","forEach","provider","coverageAreas","area","bounds","latLngBounds","bbox","center","GridLayer","_update_attribution","attributionControl","getBounds","getSouthWest","wrap","getNorthEast","zoom","attributions","map","some","zoomMax","zoomMin","intersects","a","addAttribution","removeAttribution","onAdd","onRemove","bingLayer"],"sourceRoot":""}