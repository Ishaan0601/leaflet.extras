{"version":3,"file":"lfx-webgl-heatmap-bindings.js","mappings":"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","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-webgl-heatmap-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, topojson, csv2geojson, toGeoJSON */\r\nLeafletWidget.methods.addWebGLHeatmap = function(points, layerId, group, options) {\r\n\r\n  var map = this;\r\n\r\n  if(!$.isEmptyObject(points)) {\r\n\r\n    if(options.gradientTexture) {\r\n      var attachment = document.getElementById('lfx-webgl-heatmap-'+options.gradientTexture+'-attachment');\r\n      if(!$.isEmptyObject(attachment)) {\r\n        console.log(\"am i coming in here\")\r\n        options.gradientTexture = attachment.href;\r\n      } else {\r\n        console.log(\"or in here\")\r\n        delete options.gradientTexture;\r\n      }\r\n    }\r\n\r\n    console.log(\"and what is the color now? (options.gradientTexture)\"); console.log(options.gradientTexture)\r\n    var heatmapLayer = L.webGLHeatmap(options);\r\n    heatmapLayer.setData(points);\r\n    map.layerManager.addLayer(heatmapLayer, 'webGLHeatmap', layerId, group);\r\n    if(options.gradientTexture) { // hack to trigger proper loading of the gradient\r\n      map.zoomOut();\r\n      setTimeout(function() {map.zoomIn();}, 500);\r\n    }\r\n  }\r\n};\r\n\r\nfunction getHeatmapIntensity(feature, intensityProperty) {\r\n  var intensity = null;\r\n  if(feature) {\r\n    if(typeof intensityProperty === 'string') {\r\n      intensity = feature.properties[intensityProperty];\r\n    } else if(typeof intensityProperty === 'function') {\r\n      intensity = intensityProperty(feature);\r\n    }\r\n  }\r\n  return intensity;\r\n}\r\n\r\nfunction getHeatmapCoords(geojson, intensityProperty) {\r\n\r\n  var latlngs = [];\r\n  if(typeof geojson === 'undefined' || geojson === null) {\r\n    return latlngs;\r\n  }\r\n\r\n  if(typeof geojson === 'string') {\r\n    geojson = JSON.parse(geojson);\r\n  }\r\n\r\n  // if input is a TopoJSON\r\n  // iterate over each of its objects and add their coords\r\n  if (geojson.type === 'Topology') {\r\n    var topoJsonFeatures = [];\r\n    for (var key in geojson.objects) {\r\n      var topoToGeo = topojson.feature(geojson, geojson.objects[key]);\r\n      if(L.Util.isArray(topoToGeo)) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo);\r\n      } else if('features' in topoToGeo ) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo.features);\r\n      } else {\r\n        topoJsonFeatures.push(topoToGeo);\r\n      }\r\n    }\r\n    return getHeatmapCoords(topoJsonFeatures, intensityProperty);\r\n  }\r\n\r\n  var features = L.Util.isArray(geojson) ?  geojson : geojson.features;\r\n\r\n  if(features) {  // either a FeatureCollection or an Array of Features\r\n    $.each(features, function(index, feature) {\r\n\r\n      var lat = null, lng = null;\r\n\r\n      // We're only interested in Points and Multipoints\r\n      // every other geometry is a shape\r\n      if(feature.geometry.type === 'Point') {\r\n        lat = parseFloat(feature.geometry.coordinates[1]);\r\n        lng = parseFloat(feature.geometry.coordinates[0]);\r\n\r\n        if(lat && lng) {\r\n          if(intensityProperty) {\r\n            latlngs.push([lat, lng,\r\n              getHeatmapIntensity(feature, intensityProperty)]);\r\n          } else {\r\n            latlngs.push([lat, lng]);\r\n          }\r\n        }\r\n      } else if(feature.geometry.type === 'MultiPoint') {\r\n        latlngs = latlngs.concat(\r\n          getHeatmapCoords(feature, intensityProperty));\r\n      }\r\n    });\r\n  } else if(geojson.type === 'Feature') { // Single GeoJSON Feature with MultiPoint dataset\r\n    $.each(geojson.geometry.coordinates, function(index, coordinate){\r\n      var lat = null, lng = null;\r\n      lat = parseFloat(coordinate[1]);\r\n      lng = parseFloat(coordinate[0]);\r\n      if(lat && lng) {\r\n        if(intensityProperty) {\r\n          latlngs.push([lat, lng,\r\n            getHeatmapIntensity(geojson, intensityProperty)]);\r\n        } else {\r\n          latlngs.push([lat, lng]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return latlngs;\r\n}\r\n\r\nfunction addGenericWebGLGeoJSONHeatmap( widget, geojson, intensityProperty, layerId, group, options) {\r\n  var heatmapCoords = getHeatmapCoords(geojson, intensityProperty);\r\n\r\n  if(!$.isEmptyObject(heatmapCoords)) {\r\n\r\n    if(options.gradientTexture) {\r\n      var attachment =\r\n        document.getElementById('webgl-heatmap-'+options.gradientTexture+'-attachment');\r\n      if(!$.isEmptyObject(attachment)) {\r\n        options.gradientTexture = attachment.href;\r\n      } else {\r\n        delete options.gradientTexture;\r\n      }\r\n    }\r\n\r\n    var heatmapLayer = L.webGLHeatmap(options);\r\n    heatmapLayer.setData(heatmapCoords);\r\n    widget.layerManager.addLayer(\r\n      heatmapLayer, 'webGLHeatmap', layerId, group);\r\n    if(options.gradientTexture) {\r\n      // hack to trigger proper loading of the gradient\r\n      widget.zoomOut();\r\n      setTimeout(function() {widget.zoomIn();}, 500);\r\n    }\r\n  }\r\n}\r\n\r\nLeafletWidget.methods.addWebGLGeoJSONHeatmap = function(geojson, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(geojson)) {\r\n    $.getJSON(geojson, function(geojsondata){\r\n      addGenericWebGLGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    addGenericWebGLGeoJSONHeatmap(self,\r\n      geojson, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addWebGLKMLHeatmap = function(kml, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(kml)) {\r\n    $.getJSON(kml, function(data){\r\n      var geojsondata = toGeoJSON.kml(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericWebGLGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.kml(\r\n      LeafletWidget.utils.parseXML(kml));\r\n    addGenericWebGLGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addWebGLCSVHeatmap = function(csv, intensityProperty, layerId, group, options, parserOptions) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(csv)) {\r\n    $.getJSON(csv, function(data){\r\n      csv2geojson.csv2geojson(\r\n        data, parserOptions || {},\r\n        function(err, geojsondata) {\r\n          addGenericWebGLGeoJSONHeatmap(self,\r\n            geojsondata, intensityProperty, layerId, group, options);\r\n        }\r\n      );\r\n    });\r\n  } else {\r\n    csv2geojson.csv2geojson(\r\n      csv, parserOptions || {},\r\n      function(err, geojsondata) {\r\n        addGenericWebGLGeoJSONHeatmap(self,\r\n          geojsondata, intensityProperty, layerId, group, options);\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addWebGLGPXHeatmap = function(gpx, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(gpx)) {\r\n    $.getJSON(gpx, function(data){\r\n      var geojsondata = toGeoJSON.gpx(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericWebGLGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.gpx(\r\n      LeafletWidget.utils.parseXML(gpx));\r\n    addGenericWebGLGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.removeWebGLHeatmap = function(layerId) {\r\n  this.layerManager.removeLayer('webGLHeatmap', layerId);\r\n};\r\n\r\nLeafletWidget.methods.clearWebGLHeatmap = function() {\r\n  this.layerManager.clearLayers('webGLHeatmap');\r\n};\r\n"],"names":["getHeatmapIntensity","feature","intensityProperty","intensity","properties","getHeatmapCoords","geojson","latlngs","JSON","parse","type","topoJsonFeatures","key","objects","topoToGeo","topojson","L","Util","isArray","concat","features","push","$","each","index","lat","lng","geometry","parseFloat","coordinates","coordinate","addGenericWebGLGeoJSONHeatmap","widget","layerId","group","options","heatmapCoords","isEmptyObject","gradientTexture","attachment","document","getElementById","href","heatmapLayer","webGLHeatmap","setData","layerManager","addLayer","zoomOut","setTimeout","zoomIn","LeafletWidget","methods","addWebGLHeatmap","points","map","this","console","log","addWebGLGeoJSONHeatmap","self","utils","isURL","getJSON","geojsondata","addWebGLKMLHeatmap","kml","data","toGeoJSON","parseXML","addWebGLCSVHeatmap","csv","parserOptions","csv2geojson","err","addWebGLGPXHeatmap","gpx","removeWebGLHeatmap","removeLayer","clearWebGLHeatmap","clearLayers"],"sourceRoot":""}