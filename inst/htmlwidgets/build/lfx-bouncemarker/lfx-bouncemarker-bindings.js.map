{"version":3,"file":"lfx-bouncemarker-bindings.js","mappings":"MAEA,SAASA,EAAQC,GACf,OAAIA,aAAiBC,MACZD,EAEA,CAACA,EACZ,CACA,SAASE,EAAcC,GACrB,OAAKA,OAGyB,IAAnBA,EAAa,MACfA,GAGTA,EAAQC,KAAOL,EAAQI,EAAQC,MAC/BD,EAAQE,MAAQN,EAAQI,EAAQE,OAEzBC,EAAEC,IAAIJ,EAAQE,OAAO,SAASG,EAAGC,GACtC,OAAON,EAAQC,KAAKI,EACtB,KAXSL,CAYX,CAGAO,cAAcC,QAAQC,iBAAmB,SACvCC,EAAKC,EAAKC,EAAMC,EAASC,EAAUC,EAAQC,EAAOC,EAClDC,EAAOC,EAAcC,EAAgBC,EAAWC,EAAOC,IACvD,WAEE,IAAIC,EACAC,EA0CJ,GAzCIb,IAEAA,EAAKc,QAAkB3B,EAAca,EAAKc,SAC1Cd,EAAKe,cAAkB5B,EAAca,EAAKe,eAC1Cf,EAAKgB,UAAkB7B,EAAca,EAAKgB,WAC1ChB,EAAKiB,gBAAkB9B,EAAca,EAAKiB,iBAI1CL,GAAS,IAAIjB,cAAcuB,WAAYC,MAAMnB,GAG7Ca,EAAU,SAASnB,GACjB,IAAI0B,EAAOR,EAAOS,IAAI3B,GACtB,OAAK0B,EAAKN,SAONM,EAAKE,YACPF,EAAKG,SAAW,CAACH,EAAKE,UAAWF,EAAKI,aAEpCJ,EAAKK,cACPL,EAAKM,WAAa,CAACN,EAAKK,YAAaL,EAAKO,eAExCP,EAAKQ,cACPR,EAAKS,WAAa,CAACT,EAAKQ,YAAaR,EAAKU,cAExCV,EAAKW,gBACPX,EAAKY,aAAe,CAACZ,EAAKW,cAAeX,EAAKa,gBAE5Cb,EAAKc,eACPd,EAAKe,YAAc,CAACf,EAAKc,aAAcd,EAAKgB,eAGvC,IAAIC,EAAEC,KAAKlB,IAtBT,IAAIiB,EAAEC,KAAKC,OAuBtB,IAGChD,EAAEiD,cAAc1C,KAAQP,EAAEiD,cAAczC,IAC1CR,EAAEkD,UAAU3C,IAAQP,EAAEkD,UAAU1C,GAAO,CAExC,IAAI2C,GAAK,IAAI/C,cAAcuB,WACxByB,IAAI,MAAO7C,GACX6C,IAAI,MAAO5C,GACX4C,IAAI,UAAW1C,GACf0C,IAAI,QAASvC,GACbuC,IAAI,QAASrC,GACbqC,IAAI,eAAgBpC,GACpBoC,IAAI,QAASjC,GACbiC,IAAI,eAAgBhC,GACpBQ,MAAMd,GAELL,IAAMY,EAAOgC,gBAAkBF,EAAGG,QAEtClD,cAAcC,QAAQkD,kBACpBC,KAAML,EAAItC,EAAOI,EAAgBC,GAAW,CAACiC,EAAIhD,KAC/C,IAAIW,EAAUqC,EAAGrB,IAAI3B,GAOrB,OANIM,IAAMK,EAAQL,KAAOa,EAAQnB,IACjCW,EAAQ2C,aAAc,EACtB3C,EAAQ4C,mBAAqB,CACzB/C,SAAUA,EACVC,OAAQA,GAELkC,EAAEa,OAAO,CAACR,EAAGrB,IAAI3B,EAAG,OAAQgD,EAAGrB,IAAI3B,EAAG,QAASW,EAAQ,GAEpE,CAGF,GAAE8C,KAAKJ,KACT,C","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-bouncemarker-bindings.js"],"sourcesContent":["/* global LeafletWidget, L */\r\n\r\nfunction asArray(value) {\r\n  if (value instanceof Array)\r\n    return value;\r\n  else\r\n    return [value];\r\n}\r\nfunction unpackStrings(iconset) {\r\n  if (!iconset) {\r\n    return iconset;\r\n  }\r\n  if (typeof(iconset.index) === \"undefined\") {\r\n    return iconset;\r\n  }\r\n\r\n  iconset.data = asArray(iconset.data);\r\n  iconset.index = asArray(iconset.index);\r\n\r\n  return $.map(iconset.index, function(e, i) {\r\n    return iconset.data[e];\r\n  });\r\n}\r\n\r\n\r\nLeafletWidget.methods.addBounceMarkers = function(\r\n  lat, lng, icon, layerId, duration, height, group, options,\r\n  popup, popupOptions, clusterOptions, clusterId, label, labelOptions) {\r\n  (function() {\r\n\r\n    let icondf;\r\n    let getIcon;\r\n    if (icon) {\r\n        // Unpack icons\r\n        icon.iconUrl         = unpackStrings(icon.iconUrl);\r\n        icon.iconRetinaUrl   = unpackStrings(icon.iconRetinaUrl);\r\n        icon.shadowUrl       = unpackStrings(icon.shadowUrl);\r\n        icon.shadowRetinaUrl = unpackStrings(icon.shadowRetinaUrl);\r\n\r\n        // This cbinds the icon URLs and any other icon options; they're all\r\n        // present on the icon object.\r\n        icondf = new LeafletWidget.DataFrame().cbind(icon);\r\n\r\n        // Constructs an icon from a specified row of the icon dataframe.\r\n        getIcon = function(i) {\r\n          let opts = icondf.get(i);\r\n          if (!opts.iconUrl) {\r\n            return new L.Icon.Default();\r\n          }\r\n\r\n          // Composite options (like points or sizes) are passed from R with each\r\n          // individual component as its own option. We need to combine them now\r\n          // into their composite form.\r\n          if (opts.iconWidth) {\r\n            opts.iconSize = [opts.iconWidth, opts.iconHeight];\r\n          }\r\n          if (opts.shadowWidth) {\r\n            opts.shadowSize = [opts.shadowWidth, opts.shadowHeight];\r\n          }\r\n          if (opts.iconAnchorX) {\r\n            opts.iconAnchor = [opts.iconAnchorX, opts.iconAnchorY];\r\n          }\r\n          if (opts.shadowAnchorX) {\r\n            opts.shadowAnchor = [opts.shadowAnchorX, opts.shadowAnchorY];\r\n          }\r\n          if (opts.popupAnchorX) {\r\n            opts.popupAnchor = [opts.popupAnchorX, opts.popupAnchorY];\r\n          }\r\n\r\n          return new L.Icon(opts);\r\n        };\r\n      }\r\n\r\n    if(!($.isEmptyObject(lat) || $.isEmptyObject(lng)) ||\r\n      ($.isNumeric(lat) && $.isNumeric(lng))) {\r\n\r\n      var df = new LeafletWidget.DataFrame()\r\n        .col('lat', lat)\r\n        .col('lng', lng)\r\n        .col('layerId', layerId)\r\n        .col('group', group)\r\n        .col('popup', popup)\r\n        .col('popupOptions', popupOptions)\r\n        .col('label', label)\r\n        .col('labelOptions', labelOptions)\r\n        .cbind(options);\r\n\r\n      if (icon) icondf.effectiveLength = df.nrow();\r\n\r\n      LeafletWidget.methods.addGenericMarkers(\r\n        this, df, group, clusterOptions, clusterId, (df, i) => {\r\n          var options = df.get(i);\r\n          if (icon) options.icon = getIcon(i);\r\n          options.bounceOnAdd = true;\r\n          options.bounceOnAddOptions = {\r\n              duration: duration,\r\n              height: height\r\n          };\r\n          return L.marker([df.get(i, 'lat'), df.get(i, 'lng')], options);\r\n        });\r\n    }\r\n\r\n    }\r\n  ).call(this);\r\n};\r\n"],"names":["asArray","value","Array","unpackStrings","iconset","data","index","$","map","e","i","LeafletWidget","methods","addBounceMarkers","lat","lng","icon","layerId","duration","height","group","options","popup","popupOptions","clusterOptions","clusterId","label","labelOptions","icondf","getIcon","iconUrl","iconRetinaUrl","shadowUrl","shadowRetinaUrl","DataFrame","cbind","opts","get","iconWidth","iconSize","iconHeight","shadowWidth","shadowSize","shadowHeight","iconAnchorX","iconAnchor","iconAnchorY","shadowAnchorX","shadowAnchor","shadowAnchorY","popupAnchorX","popupAnchor","popupAnchorY","L","Icon","Default","isEmptyObject","isNumeric","df","col","effectiveLength","nrow","addGenericMarkers","this","bounceOnAdd","bounceOnAddOptions","marker","call"],"sourceRoot":""}