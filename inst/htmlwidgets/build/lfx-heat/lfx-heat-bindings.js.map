{"version":3,"file":"lfx-heat-bindings.js","mappings":"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","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-heat-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, topojson, csv2geojson, toGeoJSON */\r\nLeafletWidget.methods.addHeatmap = function(points, layerId, group, options) {\r\n\r\n  if(!$.isEmptyObject(points)) {\r\n    var heatmapLayer = L.heatLayer(points, options);\r\n    this.layerManager.addLayer(heatmapLayer, 'heatmap', layerId, group);\r\n  }\r\n};\r\n\r\nfunction getHeatmapIntensity(feature, intensityProperty) {\r\n  var intensity = null;\r\n  if(feature) {\r\n    if(typeof intensityProperty === 'string') {\r\n      intensity = feature.properties[intensityProperty];\r\n    } else if(typeof intensityProperty === 'function') {\r\n      intensity = intensityProperty(feature);\r\n    }\r\n  }\r\n  return intensity;\r\n}\r\n\r\nfunction getHeatmapCoords(geojson, intensityProperty) {\r\n\r\n  var latlngs = [];\r\n  if(typeof geojson === 'undefined' || geojson === null) {\r\n    return latlngs;\r\n  }\r\n\r\n  if(typeof geojson === 'string') {\r\n    geojson = JSON.parse(geojson);\r\n  }\r\n\r\n  // if input is a TopoJSON\r\n  // iterate over each of its objects and add their coords\r\n  if (geojson.type === 'Topology') {\r\n    var topoJsonFeatures = [];\r\n    for (var key in geojson.objects) {\r\n      var topoToGeo = topojson.feature(geojson, geojson.objects[key]);\r\n      if(L.Util.isArray(topoToGeo)) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo);\r\n      } else if('features' in topoToGeo ) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo.features);\r\n      } else {\r\n        topoJsonFeatures.push(topoToGeo);\r\n      }\r\n    }\r\n    return getHeatmapCoords(topoJsonFeatures, intensityProperty);\r\n  }\r\n\r\n  var features = L.Util.isArray(geojson) ?  geojson : geojson.features;\r\n\r\n  if(features) {  // either a FeatureCollection or an Array of Features\r\n    $.each(features, function(index, feature) {\r\n\r\n      var lat = null, lng = null;\r\n\r\n      // We're only interested in Points and Multipoints\r\n      // every other geometry is a shape\r\n      if(feature.geometry.type === 'Point') {\r\n        lat = parseFloat(feature.geometry.coordinates[1]);\r\n        lng = parseFloat(feature.geometry.coordinates[0]);\r\n\r\n        if(lat && lng) {\r\n          if(intensityProperty) {\r\n            latlngs.push([lat, lng,\r\n              getHeatmapIntensity(feature, intensityProperty)]);\r\n          } else {\r\n            latlngs.push([lat, lng]);\r\n          }\r\n        }\r\n      } else if(feature.geometry.type === 'MultiPoint') {\r\n        latlngs = latlngs.concat(\r\n          getHeatmapCoords(feature, intensityProperty));\r\n      }\r\n    });\r\n  } else if(geojson.type === 'Feature') { // Single GeoJSON Feature with MultiPoint dataset\r\n    $.each(geojson.geometry.coordinates, function(index, coordinate){\r\n      var lat = null, lng = null;\r\n      lat = parseFloat(coordinate[1]);\r\n      lng = parseFloat(coordinate[0]);\r\n      if(lat && lng) {\r\n        if(intensityProperty) {\r\n          latlngs.push([lat, lng,\r\n            getHeatmapIntensity(geojson, intensityProperty)]);\r\n        } else {\r\n          latlngs.push([lat, lng]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return latlngs;\r\n}\r\n\r\nfunction addGenericGeoJSONHeatmap( widget, geojson, intensityProperty, layerId, group, options) {\r\n  var heatmapCoords = getHeatmapCoords(geojson, intensityProperty);\r\n\r\n  if(!$.isEmptyObject(heatmapCoords)) {\r\n    var heatmapLayer = L.heatLayer(heatmapCoords, options);\r\n    widget.layerManager.addLayer(\r\n      heatmapLayer, 'heatmap', layerId, group);\r\n  }\r\n}\r\n\r\nLeafletWidget.methods.addGeoJSONHeatmap = function(geojson, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(geojson)) {\r\n    $.getJSON(geojson, function(geojsondata){\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojson, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addKMLHeatmap = function(kml, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(kml)) {\r\n    $.getJSON(kml, function(data){\r\n      var geojsondata = toGeoJSON.kml(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.kml(\r\n      LeafletWidget.utils.parseXML(kml));\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addCSVHeatmap = function(csv, intensityProperty, layerId, group, options, parserOptions) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(csv)) {\r\n    $.getJSON(csv, function(data){\r\n      csv2geojson.csv2geojson(\r\n        data, parserOptions || {},\r\n        function(err, geojsondata) {\r\n          addGenericGeoJSONHeatmap(self,\r\n            geojsondata, intensityProperty, layerId, group, options);\r\n        }\r\n      );\r\n    });\r\n  } else {\r\n    csv2geojson.csv2geojson(\r\n      csv, parserOptions || {},\r\n      function(err, geojsondata) {\r\n        addGenericGeoJSONHeatmap(self,\r\n          geojsondata, intensityProperty, layerId, group, options);\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addGPXHeatmap = function(gpx, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(gpx)) {\r\n    $.getJSON(gpx, function(data){\r\n      var geojsondata = toGeoJSON.gpx(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.gpx(\r\n      LeafletWidget.utils.parseXML(gpx));\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.removeHeatmap = function(layerId) {\r\n  this.layerManager.removeLayer('heatmap', layerId);\r\n};\r\n\r\nLeafletWidget.methods.clearHeatmap = function() {\r\n  this.layerManager.clearLayers('heatmap');\r\n};\r\n"],"names":["getHeatmapIntensity","feature","intensityProperty","intensity","properties","getHeatmapCoords","geojson","latlngs","JSON","parse","type","topoJsonFeatures","key","objects","topoToGeo","topojson","L","Util","isArray","concat","features","push","$","each","index","lat","lng","geometry","parseFloat","coordinates","coordinate","addGenericGeoJSONHeatmap","widget","layerId","group","options","heatmapCoords","isEmptyObject","heatmapLayer","heatLayer","layerManager","addLayer","LeafletWidget","methods","addHeatmap","points","this","addGeoJSONHeatmap","self","utils","isURL","getJSON","geojsondata","addKMLHeatmap","kml","data","toGeoJSON","parseXML","addCSVHeatmap","csv","parserOptions","csv2geojson","err","addGPXHeatmap","gpx","removeHeatmap","removeLayer","clearHeatmap","clearLayers"],"sourceRoot":""}