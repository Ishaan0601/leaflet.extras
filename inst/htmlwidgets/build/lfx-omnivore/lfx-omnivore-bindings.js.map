{"version":3,"file":"lfx-omnivore-bindings.js","mappings":"MA8CA,SAASA,EAAcC,EAAOC,GAC5B,IAAIC,EAAa,CAAC,EAUlB,OATIC,EAAEC,cAAcH,IAClBE,EAAEE,KAAKJ,GAAgB,SAAUK,EAAGC,GAC1B,gBAALD,GAA4B,cAALA,GACrBN,GAASA,EAAMM,KAChBJ,EAAWI,GAAKN,EAAMM,GAG5B,IAEKJ,CACT,CAuBA,SAASM,EACPC,EACAC,EACAC,EAASC,EACTC,EACAC,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,GAEb,IAAIC,EAAOlB,EAGPmB,EAAeD,EAAKE,aAAaC,SAAS,UAAWV,GACvDW,EAA6B,OAAnBZ,EACZ,GAAIY,IAAYH,EAAc,CAE5B,GADAA,EAAeI,EAAEC,mBAAmBC,aAAaf,GAC9CA,EAAegB,aAAc,CAC9B,IAAIA,EAAehB,EAAegB,oBAC3BhB,EAAegB,aACtBP,EAAaO,aAAaA,EAC5B,CACAP,EAAaQ,kBAAoB,IAAIC,cAAcC,kBAAkBV,EACvE,CACA,IAAIW,EAAYR,EAAU,CAAEX,UAAWA,GAAc,CAAC,EAClDoB,EAAYT,EAAU,KAAOnB,EAG7BZ,EAAQyB,EACRxB,EAAiByB,EACjBe,EAAe1C,EAAcC,EAAOC,GAExC,SAASyC,EAAiBC,GACxB,IAAIC,EAAQD,EAAEE,OACdD,EAAM/B,SAASZ,GACZA,EAAe6C,cAChBF,EAAME,cAEV,CACA,SAASC,EAAaJ,GACpB,IAAIC,EAAQD,EAAEE,OACdD,EAAM/B,SAAS4B,GACZxC,EAAe+C,YAChBJ,EAAMK,aAEV,CAEA,IAAIC,EAAc/C,EAAEgD,OAAO,CAAC,EAAGnD,GAgG3BoD,EAAiB,CAAC,EACnBvC,IACDuC,EAAepD,MAhGjB,SAAuBqD,GACrB,OAAOlD,EAAEgD,OAAOD,EAAaG,EAAQrD,OAAS,CAAC,EAC7CqD,EAAQC,WAAWtD,OAAS,CAAC,EACjC,GA+FAoD,EAAeG,cA7Ff,SAA+BF,EAAST,GACtC,IAAIY,EAAmBrD,EAAEgD,OAAO,CAC9BM,UAAWJ,EAAQK,GACnBJ,WAAYD,EAAQC,YACnBf,GAAa,CAAC,GAGb,MAAOhB,IACkB,iBAAjBA,EACJpB,EAAEC,cAAcoB,GAGlBoB,EAAMe,UAAUN,EAAQC,WAAW/B,IAFnCqB,EAAMe,UAAUN,EAAQC,WAAW/B,GAAgBC,GAIrB,mBAAjBD,IACXpB,EAAEC,cAAcoB,GAGlBoB,EAAMe,UAAUpC,EAAc8B,IAF9BT,EAAMe,UAAUpC,EAAc8B,GAAU7B,KAQ1C,MAAOH,IACkB,iBAAjBA,EACJlB,EAAEC,cAAckB,GAOlBsB,EAAMgB,YAAYP,EAAQC,WAAWjC,IANlCC,EAAauC,UACdjB,EAAMgB,YAAYP,EAAQC,WAAWjC,GAAgBC,GAAcwC,YAEnElB,EAAMgB,YAAYP,EAAQC,WAAWjC,GAAgBC,GAKzB,mBAAjBD,IACXlB,EAAEC,cAAckB,GAOlBsB,EAAMgB,YAAYvC,EAAcgC,IAN7B/B,EAAayC,OACdnB,EAAMgB,YAAYvC,EAAcgC,GAAU/B,GAAcwC,YAExDlB,EAAMgB,YAAYvC,EAAcgC,GAAU/B,KAS9CnB,EAAEC,cAAcH,IAClB2C,EAAMoB,GAAG,CACP,UAAatB,EACb,SAAYK,IAGhBH,EAAMoB,GAAG,QAAS3B,cAAc4B,QAAQC,aAAavC,EAAK+B,GAAI/C,EAC5D6B,EAAW,gBAAiBgB,GAAmB7B,GACjDiB,EAAMoB,GAAG,YAAa3B,cAAc4B,QAAQC,aAAavC,EAAK+B,GAAI/C,EAChE6B,EAAW,oBAAqBgB,GAAmB7B,GACrDiB,EAAMoB,GAAG,WAAY3B,cAAc4B,QAAQC,aAAavC,EAAK+B,GAAI/C,EAC/D6B,EAAW,mBAAoBgB,GAAmB7B,EACtD,EAkCkB,iBAAfb,GAAkCX,EAAEC,cAAcW,KACnDqC,EAAee,aAhCjB,SAA8Bd,EAASe,GACrC,IAAIxB,EAAQ,KAqBZ,MApBkB,iBAAf9B,EACD8B,EAAQZ,EAAEqC,aAAaD,EAAQnD,GAAiB,CAAC,GAE7C,MAAOD,EACuB,iBAAtBA,EACR4B,EAAQZ,EAAEsC,OAAOF,EAAQjE,EAAEgD,OAAO,CAChCoB,KAAMrD,EAAmBH,EAAYsC,EAAQC,WAAWtC,MACvDC,GAAiB,CAAC,IACgB,mBAAtBD,IACf4B,EAAQZ,EAAEsC,OAAOF,EAAQjE,EAAEgD,OAAO,CAChCoB,KAAMrD,EAAmBH,EAAYC,EAAmBqC,MACvDpC,GAAiB,CAAC,KAGvB2B,EAAQZ,EAAEsC,OAAOF,EAAQjE,EAAEgD,OAAO,CAChCoB,KAAMrD,EAAmBH,IACxBE,GAAiB,CAAC,IAIlB2B,CACT,GAYA,IAAI4B,EAAU9D,EAAqB0C,GAE/BrB,GACFH,EAAaQ,kBAAkBqC,IAAID,GACnC7C,EAAKE,aAAa6C,SAAS9C,EAAc,UAAWR,EAAWR,IAE/De,EAAKE,aAAa6C,SAASF,EAAS,UAAW7D,EAAS6B,EAG5D,CAjPAH,cAAcsC,MAAMC,SAAW,SAASC,GACtC,MAAmB,iBAARA,GACF,IAAKC,WAAaC,gBAAgBF,EAAK,YAEvCA,CAEX,EAGAxC,cAAcsC,MAAMK,iBAAmB,SAASC,GAC9C,IAAIC,EAEJ,GAAG,MAAOD,GACS,iBAATA,GAAqC,KAAhBA,EAAKE,OAClC,OAAOD,EAWT,GAAqB,cAPnBA,EADiB,iBAATD,EACEG,KAAKC,MAAMJ,GAEXA,GAKAK,KAAqB,CAC/B,IAAIC,EAAmB,GACvB,IAAK,IAAIC,KAAON,EAAQO,QAAS,CAC/B,IAAIC,EAAYC,SAAStC,QAAQ6B,EAASA,EAAQO,QAAQD,IACvDxD,EAAE4D,KAAKC,QAAQH,GAChBH,EAAmBA,EAAiBO,OAAOJ,GACnC,aAAcA,EACtBH,EAAmBA,EAAiBO,OAAOJ,EAAUK,UAErDR,EAAiBS,KAAKN,EAE1B,CACAR,EAAUK,CACZ,CACA,OAAOL,CACT,EAkBA7C,cAAcsC,MAAMsB,MAAQ,SAASC,GACnC,MAAmB,iBAARA,GAAmC,KAAfA,EAAIf,QAe5B,IAAIgB,OAXI,6PAYLC,KAAKF,EACjB,EAuKA7D,cAAc4B,QAAQoC,uBAAyB7F,EAE/C6B,cAAc4B,QAAQqC,aAAe,SACnCpB,EAASvE,EAASC,EAClBE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,GAEb,IAAIC,EAAO4E,KACRlE,cAAcsC,MAAMsB,MAAMf,GAC3B/E,EAAEqG,QAAQtB,GAAS,SAASuB,GAC1BjG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,IAEAlB,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiBE,GAAUwB,EACnD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAGnB,EAEAW,cAAc4B,QAAQ2C,OAAS,SAC7BC,EAAKlG,EAASC,EACdE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,GAEb,IAAIC,EAAO4E,KACX,GAAGlE,cAAcsC,MAAMsB,MAAMY,GAC3B1G,EAAEqG,QAAQK,GAAK,SAAS5B,GACtB,IAAIwB,EAAcK,UAAUD,IAC1BxE,cAAcsC,MAAMC,SAASK,IAC/BzE,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,QACK,CACL,IAAI+E,EAAcK,UAAUD,IAC1BxE,cAAcsC,MAAMC,SAASiC,IAC/BrG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,CACF,EAEAW,cAAc4B,QAAQ8C,OAAS,SAC7BC,EAAKrG,EAASC,EACdE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAAkBuF,GAE/B,IAAItF,EAAO4E,KACRlE,cAAcsC,MAAMsB,MAAMe,GAC3B7G,EAAEqG,QAAQQ,GAAK,SAAS/B,GACtBiC,YAAYA,YACVjC,EAAMgC,GAAoB,CAAC,GAC3B,SAASE,EAAKV,GACZjG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,GAEJ,IAEAwF,YAAYA,YACVF,EAAKC,GAAoB,CAAC,GAC1B,SAASE,EAAKV,GACZjG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,GAGN,EAEAW,cAAc4B,QAAQmD,OAAS,SAC7BC,EAAK1G,EAASC,EACdE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,GAEb,IAAIC,EAAO4E,KACX,GAAGlE,cAAcsC,MAAMsB,MAAMoB,GAC3BlH,EAAEqG,QAAQa,GAAK,SAASpC,GACtB,IAAIwB,EAAcK,UAAUO,IAC1BhF,cAAcsC,MAAMC,SAASK,IAC/BzE,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,QACK,CACL,IAAI+E,EAAcK,UAAUO,IAC1BhF,cAAcsC,MAAMC,SAASyC,IAC/B7G,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAE2E,QACPtE,cAAcsC,MAAMK,iBAAiByB,GAAcC,EACvD,GACA/F,EAASC,GACT,EACAE,EAAYC,EACZC,EAAoBC,EAAeC,EACnCC,EAAgBC,EAChBC,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,CACF,EAIAW,cAAc4B,QAAQqD,qBAAuB,SAC3CpC,EAASvE,EAASC,EAClBS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAAkB6F,GAG/B,IACItH,EAAiByB,EACjBe,EAAe1C,EAFP0B,EAE4BxB,GAEpCE,EAAEC,cAAcmH,KAClBA,EAActH,eAAiBA,EAC/BsH,EAAcrH,WAAauC,GAG7B,IAAId,EAAO4E,KACRlE,cAAcsC,MAAMsB,MAAMf,GAC3B/E,EAAEqG,QAAQtB,GAAS,SAASuB,GAC1BjG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAEwF,WACPnF,cAAcsC,MAAMK,iBAAiByB,GACrCtG,EAAEgD,OAAO1B,EAAaiF,GAAiBa,EAC3C,GACA5G,EAASC,GACT,EACA,KAAM,KACN,KAAM,KAAM,KACZ,KAAM,KACNS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,IAEAlB,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAEwF,WACPnF,cAAcsC,MAAMK,iBAAiBE,GACrC/E,EAAEgD,OAAO1B,EAAaiF,GAAiBa,EAC3C,GACA5G,EAASC,GACT,EACA,KAAM,KACN,KAAM,KAAM,KACZ,KAAM,KACNS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAGnB,EAEAW,cAAc4B,QAAQwD,iBAAmB,SACvCZ,EAAKlG,EAASC,EACdS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAAkB6F,GAE/B,IACItH,EAAiByB,EACjBe,EAAe1C,EAFP0B,EAE4BxB,GAEpCE,EAAEC,cAAcmH,KAClBA,EAActH,eAAiBA,EAC/BsH,EAAcrH,WAAauC,GAG7B,IAAId,EAAO4E,KACX,GAAGlE,cAAcsC,MAAMsB,MAAMY,GAC3B1G,EAAEqG,QAAQK,GAAK,SAAS5B,GACtB,IAAIwB,EAAcK,UAAUD,IAAIxE,cAAcsC,MAAMC,SAASK,IAC7DzE,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAEwF,WACPnF,cAAcsC,MAAMK,iBAAiByB,GACrCtG,EAAEgD,OAAO1B,EAAaiF,GAAiBa,EAC3C,GACA5G,EAASC,GACT,EACA,KAAM,KACN,KAAM,KAAM,KACZ,KAAM,KACNS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,QACK,CACL,IAAI+E,EAAcK,UAAUD,IAAIxE,cAAcsC,MAAMC,SAASiC,IAC7DrG,EACEmB,GACA,SAAyB+E,GACvB,OAAO1E,EAAEwF,WACPnF,cAAcsC,MAAMK,iBAAiByB,GACrCtG,EAAEgD,OAAO1B,EAAaiF,GAAiBa,EAC3C,GACA5G,EAASC,GACT,EACA,KAAM,KACN,KAAM,KAAM,KACZ,KAAM,KACNS,EAAeC,EAAcC,EAAeC,EAC5CC,EAAaC,EAEjB,CACF,C","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-omnivore-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, topojson, csv2geojson, toGeoJSON */\r\n\r\n// parse an XML\r\nLeafletWidget.utils.parseXML = function(str) {\r\n  if (typeof str === 'string') {\r\n    return (new DOMParser()).parseFromString(str, 'text/xml');\r\n  } else {\r\n    return str;\r\n  }\r\n};\r\n\r\n// parse an GeoJSON/TopoJSON\r\nLeafletWidget.utils.getParsedGeoJSON = function(data) {\r\n  var geojson;\r\n\r\n  if(typeof data ==='undefined' || data === null ||\r\n    (typeof data === 'string' && data.trim() === '')) {\r\n    return geojson;\r\n  }\r\n\r\n  if(typeof data === 'string') {\r\n    geojson = JSON.parse(data);\r\n  } else {\r\n    geojson = data;\r\n  }\r\n\r\n  // if input is a TopoJSON\r\n  // iterate over each of its objects and add their coords\r\n  if (geojson.type === 'Topology') {\r\n    var topoJsonFeatures = [];\r\n    for (var key in geojson.objects) {\r\n      var topoToGeo = topojson.feature(geojson, geojson.objects[key]);\r\n      if(L.Util.isArray(topoToGeo)) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo);\r\n      } else if('features' in topoToGeo ) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo.features);\r\n      } else {\r\n        topoJsonFeatures.push(topoToGeo);\r\n      }\r\n    }\r\n    geojson = topoJsonFeatures;\r\n  }\r\n  return geojson;\r\n};\r\n\r\n// utility method to extract resetStyle from defaultStyle & highlightStyle\r\nfunction getResetStyle(style, highlightStyle) {\r\n  var resetStyle = {};\r\n  if(!$.isEmptyObject(highlightStyle)) {\r\n    $.each(highlightStyle, function (k, v) {\r\n      if(k != 'bringToFront' && k != 'sendToBack'){\r\n        if(style && style[k]) {\r\n          resetStyle[k] = style[k];\r\n        }\r\n      }\r\n    });\r\n  }\r\n  return resetStyle;\r\n}\r\n\r\n// is a given string a URL\r\nLeafletWidget.utils.isURL = function(url) {\r\n  if (typeof url !== 'string' || url.trim() === '' ) {\r\n    return false;\r\n  }\r\n  /* eslint-disable quotes */\r\n  var strRegex = '^((https|http|ftp|rtsp|mms)?://)'\r\n    + \"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?\" //ftp user@\r\n    + '(([0-9]{1,3}\\\\.){3}[0-9]{1,3}' // IP/URL- 199.194.52.184\r\n    + '|' // IP/DOMAIN\r\n    + \"([0-9a-z_!~*'()-]+\\\\.)*\" //  www.\r\n    + '([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\\\\.' //\r\n    + '[a-z]{2,6})' // first level domain- .com or .museum\r\n    + '(:[0-9]{1,4})?' // Port - :80\r\n    + '((/?)|' // a slash isn't required if there is no file name\r\n    + \"(/[0-9A-Za-z_!~*'().;?:@&=+$,%#-]+)+/?)$\";\r\n  /* eslint-enable quotes */\r\n  var re=new RegExp(strRegex);\r\n  return re.test(url);\r\n};\r\n\r\nfunction addGeoJSONLayer(\r\n  widget,\r\n  geojsonLayerFunction,\r\n  layerId, group,\r\n  setStyle,\r\n  markerType, markerIcons,\r\n  markerIconProperty, markerOptions, markerIconFunction,\r\n  clusterOptions, clusterId,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions\r\n) {\r\n  var self = widget;\r\n\r\n  // Initialize Clusering support if enabled.\r\n  var clusterGroup = self.layerManager.getLayer('cluster', clusterId),\r\n    cluster = clusterOptions !== null;\r\n  if (cluster && !clusterGroup) {\r\n    clusterGroup = L.markerClusterGroup.layerSupport(clusterOptions);\r\n    if(clusterOptions.freezeAtZoom) {\r\n      var freezeAtZoom = clusterOptions.freezeAtZoom;\r\n      delete clusterOptions.freezeAtZoom;\r\n      clusterGroup.freezeAtZoom(freezeAtZoom);\r\n    }\r\n    clusterGroup.clusterLayerStore = new LeafletWidget.ClusterLayerStore(clusterGroup);\r\n  }\r\n  var extraInfo = cluster ? { clusterId: clusterId } : {};\r\n  var thisGroup = cluster ? null : group;\r\n\r\n  // Initialize shape highlighting if enabled.\r\n  var style = pathOptions;\r\n  var highlightStyle = highlightOptions;\r\n  var defaultStyle = getResetStyle(style, highlightStyle);\r\n\r\n  function highlightFeature(e) {\r\n    var layer = e.target;\r\n    layer.setStyle(highlightStyle);\r\n    if(highlightStyle.bringToFront) {\r\n      layer.bringToFront();\r\n    }\r\n  }\r\n  function resetFeature(e){\r\n    var layer = e.target;\r\n    layer.setStyle(defaultStyle);\r\n    if(highlightStyle.sendToBack) {\r\n      layer.bringToBack();\r\n    }\r\n  }\r\n\r\n  var globalStyle = $.extend({}, style);\r\n\r\n  function styleFunction(feature) {\r\n    return $.extend(globalStyle, feature.style || {},\r\n      feature.properties.style || {});\r\n  }\r\n\r\n  function onEachFeatureFunction(feature, layer) {\r\n    var featureExtraInfo = $.extend({\r\n      featureId: feature.id,\r\n      properties: feature.properties\r\n    }, extraInfo || {});\r\n\r\n    // create and bind popups if enabled.\r\n    if (typeof popupProperty !== 'undefined' && popupProperty !== null) {\r\n      if(typeof popupProperty == 'string') {\r\n        if(!$.isEmptyObject(popupOptions)) {\r\n          layer.bindPopup(feature.properties[popupProperty], popupOptions);\r\n        } else {\r\n          layer.bindPopup(feature.properties[popupProperty]);\r\n        }\r\n      } else if(typeof popupProperty == 'function') {\r\n        if(!$.isEmptyObject(popupOptions)) {\r\n          layer.bindPopup(popupProperty(feature), popupOptions);\r\n        } else {\r\n          layer.bindPopup(popupProperty(feature));\r\n        }\r\n      }\r\n    }\r\n\r\n    // create and bind labels if enabled.\r\n    if (typeof labelProperty !== 'undefined' && labelProperty !== null) {\r\n      if(typeof labelProperty == 'string') {\r\n        if(!$.isEmptyObject(labelOptions)) {\r\n          if(labelOptions.permanent) {\r\n            layer.bindTooltip(feature.properties[labelProperty], labelOptions).showLabel();\r\n          } else {\r\n            layer.bindTooltip(feature.properties[labelProperty], labelOptions);\r\n          }\r\n        } else {\r\n          layer.bindTooltip(feature.properties[labelProperty]);\r\n        }\r\n      } else if(typeof labelProperty == 'function') {\r\n        if(!$.isEmptyObject(labelOptions)) {\r\n          if(labelOptions.noHide) {\r\n            layer.bindTooltip(labelProperty(feature), labelOptions).showLabel();\r\n          } else {\r\n            layer.bindTooltip(labelProperty(feature), labelOptions);\r\n          }\r\n        } else {\r\n          layer.bindTooltip(labelProperty(feature));\r\n        }\r\n      }\r\n    }\r\n\r\n    // add EventListeners to highlight shapes on hover if enabled.\r\n    if(!$.isEmptyObject(highlightStyle)) {\r\n      layer.on({\r\n        'mouseover': highlightFeature,\r\n        'mouseout': resetFeature});\r\n    }\r\n\r\n    layer.on('click', LeafletWidget.methods.mouseHandler(self.id, layerId,\r\n      thisGroup, 'geojson_click', featureExtraInfo), self);\r\n    layer.on('mouseover', LeafletWidget.methods.mouseHandler(self.id, layerId,\r\n      thisGroup, 'geojson_mouseover', featureExtraInfo), self);\r\n    layer.on('mouseout', LeafletWidget.methods.mouseHandler(self.id, layerId,\r\n      thisGroup, 'geojson_mouseout', featureExtraInfo), self);\r\n  }\r\n\r\n  // code for custom markers\r\n  function pointToLayerFunction(feature, latlng) {\r\n    var layer = null;\r\n    if(markerType === 'circleMarker') {\r\n      layer = L.circleMarker(latlng, markerOptions || {});\r\n    } else {\r\n      if (typeof markerIconProperty !== 'undefined' && markerIconProperty !== null) {\r\n        if(typeof markerIconProperty == 'string') {\r\n          layer = L.marker(latlng, $.extend({\r\n            icon: markerIconFunction(markerIcons[feature.properties[markerIconProperty]])\r\n          }, markerOptions || {}));\r\n        } else if(typeof markerIconProperty == 'function') {\r\n          layer = L.marker(latlng, $.extend({\r\n            icon: markerIconFunction(markerIcons[markerIconProperty(feature)])\r\n          }, markerOptions || {}));\r\n        }\r\n      } else {\r\n        layer = L.marker(latlng, $.extend({\r\n          icon: markerIconFunction(markerIcons)\r\n        }, markerOptions || {}));\r\n      }\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  var geojsonOptions = {};\r\n  if(setStyle){\r\n    geojsonOptions.style = styleFunction;\r\n  }\r\n  geojsonOptions.onEachFeature = onEachFeatureFunction;\r\n\r\n  if(markerType === 'circleMarker' || !$.isEmptyObject(markerIcons)) {\r\n    geojsonOptions.pointToLayer = pointToLayerFunction;\r\n  }\r\n\r\n  var gjlayer = geojsonLayerFunction(geojsonOptions);\r\n\r\n  if (cluster) {\r\n    clusterGroup.clusterLayerStore.add(gjlayer);\r\n    self.layerManager.addLayer(clusterGroup, 'cluster', clusterId, group);\r\n  } else {\r\n    self.layerManager.addLayer(gjlayer, 'geojson', layerId, thisGroup);\r\n  }\r\n\r\n}\r\n\r\nLeafletWidget.methods.addGenericGeoJSONLayer = addGeoJSONLayer;\r\n\r\nLeafletWidget.methods.addGeoJSONv2 = function(\r\n  geojson, layerId, group,\r\n  markerType, markerIcons,\r\n  markerIconProperty, markerOptions, markerIconFunction,\r\n  clusterOptions, clusterId,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions\r\n) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(geojson)) {\r\n    $.getJSON(geojson, function(geojsondata){\r\n      addGeoJSONLayer(\r\n        self,\r\n        function getGeoJSONLayer(geoJSONOptions){\r\n          return L.geoJson(\r\n            LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n        },\r\n        layerId, group,\r\n        true,\r\n        markerType, markerIcons,\r\n        markerIconProperty, markerOptions, markerIconFunction,\r\n        clusterOptions, clusterId,\r\n        labelProperty, labelOptions, popupProperty, popupOptions,\r\n        pathOptions, highlightOptions\r\n      );\r\n    });\r\n  } else {\r\n    addGeoJSONLayer(\r\n      self,\r\n      function getGeoJSONLayer(geoJSONOptions){\r\n        return L.geoJson(\r\n          LeafletWidget.utils.getParsedGeoJSON(geojson), geoJSONOptions);\r\n      },\r\n      layerId, group,\r\n      true,\r\n      markerType, markerIcons,\r\n      markerIconProperty, markerOptions, markerIconFunction,\r\n      clusterOptions, clusterId,\r\n      labelProperty, labelOptions, popupProperty, popupOptions,\r\n      pathOptions, highlightOptions\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addKML = function(\r\n  kml, layerId, group,\r\n  markerType, markerIcons,\r\n  markerIconProperty, markerOptions, markerIconFunction,\r\n  clusterOptions, clusterId,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions\r\n) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(kml)) {\r\n    $.getJSON(kml, function(data){\r\n      var geojsondata = toGeoJSON.kml(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGeoJSONLayer(\r\n        self,\r\n        function getGeoJSONLayer(geoJSONOptions){\r\n          return L.geoJson(\r\n            LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n        },\r\n        layerId, group,\r\n        true,\r\n        markerType, markerIcons,\r\n        markerIconProperty, markerOptions, markerIconFunction,\r\n        clusterOptions, clusterId,\r\n        labelProperty, labelOptions, popupProperty, popupOptions,\r\n        pathOptions, highlightOptions\r\n      );\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.kml(\r\n      LeafletWidget.utils.parseXML(kml));\r\n    addGeoJSONLayer(\r\n      self,\r\n      function getGeoJSONLayer(geoJSONOptions){\r\n        return L.geoJson(\r\n          LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n      },\r\n      layerId, group,\r\n      true,\r\n      markerType, markerIcons,\r\n      markerIconProperty, markerOptions, markerIconFunction,\r\n      clusterOptions, clusterId,\r\n      labelProperty, labelOptions, popupProperty, popupOptions,\r\n      pathOptions, highlightOptions\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addCSV = function(\r\n  csv, layerId, group,\r\n  markerType, markerIcons,\r\n  markerIconProperty, markerOptions, markerIconFunction,\r\n  clusterOptions, clusterId,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions, csvParserOptions\r\n) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(csv)) {\r\n    $.getJSON(csv, function(data){\r\n      csv2geojson.csv2geojson(\r\n        data, csvParserOptions || {},\r\n        function(err, geojsondata) {\r\n          addGeoJSONLayer(\r\n            self,\r\n            function getGeoJSONLayer(geoJSONOptions){\r\n              return L.geoJson(\r\n                LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n            },\r\n            layerId, group,\r\n            true,\r\n            markerType, markerIcons,\r\n            markerIconProperty, markerOptions, markerIconFunction,\r\n            clusterOptions, clusterId,\r\n            labelProperty, labelOptions, popupProperty, popupOptions,\r\n            pathOptions, highlightOptions\r\n          );\r\n        }\r\n      );\r\n    });\r\n  } else {\r\n    csv2geojson.csv2geojson(\r\n      csv, csvParserOptions || {},\r\n      function(err, geojsondata) {\r\n        addGeoJSONLayer(\r\n          self,\r\n          function getGeoJSONLayer(geoJSONOptions){\r\n            return L.geoJson(\r\n              LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n          },\r\n          layerId, group,\r\n          true,\r\n          markerType, markerIcons,\r\n          markerIconProperty, markerOptions, markerIconFunction,\r\n          clusterOptions, clusterId,\r\n          labelProperty, labelOptions, popupProperty, popupOptions,\r\n          pathOptions, highlightOptions\r\n        );\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addGPX = function(\r\n  gpx, layerId, group,\r\n  markerType, markerIcons,\r\n  markerIconProperty, markerOptions, markerIconFunction,\r\n  clusterOptions, clusterId,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions\r\n) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(gpx)) {\r\n    $.getJSON(gpx, function(data){\r\n      var geojsondata = toGeoJSON.gpx(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGeoJSONLayer(\r\n        self,\r\n        function getGeoJSONLayer(geoJSONOptions){\r\n          return L.geoJson(\r\n            LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n        },\r\n        layerId, group,\r\n        true,\r\n        markerType, markerIcons,\r\n        markerIconProperty, markerOptions, markerIconFunction,\r\n        clusterOptions, clusterId,\r\n        labelProperty, labelOptions, popupProperty, popupOptions,\r\n        pathOptions, highlightOptions\r\n      );\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.gpx(\r\n      LeafletWidget.utils.parseXML(gpx));\r\n    addGeoJSONLayer(\r\n      self,\r\n      function getGeoJSONLayer(geoJSONOptions){\r\n        return L.geoJson(\r\n          LeafletWidget.utils.getParsedGeoJSON(geojsondata), geoJSONOptions);\r\n      },\r\n      layerId, group,\r\n      true,\r\n      markerType, markerIcons,\r\n      markerIconProperty, markerOptions, markerIconFunction,\r\n      clusterOptions, clusterId,\r\n      labelProperty, labelOptions, popupProperty, popupOptions,\r\n      pathOptions, highlightOptions\r\n    );\r\n  }\r\n};\r\n\r\n\r\n\r\nLeafletWidget.methods.addGeoJSONChoropleth = function(\r\n  geojson, layerId, group,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions, legendOptions\r\n) {\r\n\r\n  var style = pathOptions;\r\n  var highlightStyle = highlightOptions;\r\n  var defaultStyle = getResetStyle(style, highlightStyle);\r\n\r\n  if(!$.isEmptyObject(legendOptions)) {\r\n    legendOptions.highlightStyle = highlightStyle;\r\n    legendOptions.resetStyle = defaultStyle;\r\n  }\r\n\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(geojson)) {\r\n    $.getJSON(geojson, function(geojsondata){\r\n      addGeoJSONLayer(\r\n        self,\r\n        function getGeoJSONLayer(geoJSONOptions){\r\n          return L.choropleth(\r\n            LeafletWidget.utils.getParsedGeoJSON(geojsondata),\r\n            $.extend(pathOptions, geoJSONOptions), legendOptions);\r\n        },\r\n        layerId, group,\r\n        false,\r\n        null, null,\r\n        null, null, null,\r\n        null, null,\r\n        labelProperty, labelOptions, popupProperty, popupOptions,\r\n        pathOptions, highlightOptions\r\n      );\r\n    });\r\n  } else {\r\n    addGeoJSONLayer(\r\n      self,\r\n      function getGeoJSONLayer(geoJSONOptions){\r\n        return L.choropleth(\r\n          LeafletWidget.utils.getParsedGeoJSON(geojson),\r\n          $.extend(pathOptions, geoJSONOptions), legendOptions);\r\n      },\r\n      layerId, group,\r\n      false,\r\n      null, null,\r\n      null, null, null,\r\n      null, null,\r\n      labelProperty, labelOptions, popupProperty, popupOptions,\r\n      pathOptions, highlightOptions\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addKMLChoropleth = function(\r\n  kml, layerId, group,\r\n  labelProperty, labelOptions, popupProperty, popupOptions,\r\n  pathOptions, highlightOptions, legendOptions\r\n) {\r\n  var style = pathOptions;\r\n  var highlightStyle = highlightOptions;\r\n  var defaultStyle = getResetStyle(style, highlightStyle);\r\n\r\n  if(!$.isEmptyObject(legendOptions)) {\r\n    legendOptions.highlightStyle = highlightStyle;\r\n    legendOptions.resetStyle = defaultStyle;\r\n  }\r\n\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(kml)) {\r\n    $.getJSON(kml, function(data){\r\n      var geojsondata = toGeoJSON.kml(LeafletWidget.utils.parseXML(data));\r\n      addGeoJSONLayer(\r\n        self,\r\n        function getGeoJSONLayer(geoJSONOptions){\r\n          return L.choropleth(\r\n            LeafletWidget.utils.getParsedGeoJSON(geojsondata),\r\n            $.extend(pathOptions, geoJSONOptions), legendOptions);\r\n        },\r\n        layerId, group,\r\n        false,\r\n        null, null,\r\n        null, null, null,\r\n        null, null,\r\n        labelProperty, labelOptions, popupProperty, popupOptions,\r\n        pathOptions, highlightOptions\r\n      );\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.kml(LeafletWidget.utils.parseXML(kml));\r\n    addGeoJSONLayer(\r\n      self,\r\n      function getGeoJSONLayer(geoJSONOptions){\r\n        return L.choropleth(\r\n          LeafletWidget.utils.getParsedGeoJSON(geojsondata),\r\n          $.extend(pathOptions, geoJSONOptions), legendOptions);\r\n      },\r\n      layerId, group,\r\n      false,\r\n      null, null,\r\n      null, null, null,\r\n      null, null,\r\n      labelProperty, labelOptions, popupProperty, popupOptions,\r\n      pathOptions, highlightOptions\r\n    );\r\n  }\r\n};\r\n"],"names":["getResetStyle","style","highlightStyle","resetStyle","$","isEmptyObject","each","k","v","addGeoJSONLayer","widget","geojsonLayerFunction","layerId","group","setStyle","markerType","markerIcons","markerIconProperty","markerOptions","markerIconFunction","clusterOptions","clusterId","labelProperty","labelOptions","popupProperty","popupOptions","pathOptions","highlightOptions","self","clusterGroup","layerManager","getLayer","cluster","L","markerClusterGroup","layerSupport","freezeAtZoom","clusterLayerStore","LeafletWidget","ClusterLayerStore","extraInfo","thisGroup","defaultStyle","highlightFeature","e","layer","target","bringToFront","resetFeature","sendToBack","bringToBack","globalStyle","extend","geojsonOptions","feature","properties","onEachFeature","featureExtraInfo","featureId","id","bindPopup","bindTooltip","permanent","showLabel","noHide","on","methods","mouseHandler","pointToLayer","latlng","circleMarker","marker","icon","gjlayer","add","addLayer","utils","parseXML","str","DOMParser","parseFromString","getParsedGeoJSON","data","geojson","trim","JSON","parse","type","topoJsonFeatures","key","objects","topoToGeo","topojson","Util","isArray","concat","features","push","isURL","url","RegExp","test","addGenericGeoJSONLayer","addGeoJSONv2","this","getJSON","geojsondata","geoJSONOptions","geoJson","addKML","kml","toGeoJSON","addCSV","csv","csvParserOptions","csv2geojson","err","addGPX","gpx","addGeoJSONChoropleth","legendOptions","choropleth","addKMLChoropleth"],"sourceRoot":""}